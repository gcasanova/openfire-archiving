package com.i7.openfire.archive;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.TimerTask;

import org.jivesoftware.openfire.cluster.ClusterManager;
import org.jivesoftware.util.JiveConstants;
import org.jivesoftware.util.TaskEngine;
import org.jivesoftware.util.cache.CacheFactory;

import com.i7.openfire.archive.cluster.SendConversationEventsTask;

/**
 * Queue conversation events generated by this JVM and send them to the senior
 * cluster member every 3 seconds. This is an optimization to reduce traffic
 * between the cluster nodes specially when under heavy conversations load.
 *
 */
public class ConversationEventsQueue {

	/**
	 * Chat events that are pending to be sent to the senior cluster member.
	 * Key: Conversation Key; Value: List of conversation events.
	 */
	private final Map<String, List<ConversationEvent>> chatEvents = new HashMap<String, List<ConversationEvent>>();

	public ConversationEventsQueue(TaskEngine taskEngine) {

		// Schedule a task to do conversation archiving.
		TimerTask sendTask = new TimerTask() {
			@Override
			public void run() {
				// Move queued events to a temporary place
				List<ConversationEvent> eventsToSend = new ArrayList<ConversationEvent>();
				synchronized (chatEvents) {
					for (List<ConversationEvent> list : chatEvents.values()) {
						// Send all events
						eventsToSend.addAll(list);
					}
					// We can empty the queue now
					chatEvents.clear();
				}

				// Send the queued events to the senior cluster member
				CacheFactory.doClusterTask(new SendConversationEventsTask(eventsToSend),
						ClusterManager.getSeniorClusterMember().toByteArray());
			}
		};
		taskEngine.scheduleAtFixedRate(sendTask, JiveConstants.SECOND * 3, JiveConstants.SECOND * 3);
	}

	/**
	 * Queues the one-to-one chat event to be later sent to the senior cluster
	 * member.
	 *
	 * @param conversationKey
	 *            unique key that identifies the conversation.
	 * @param event
	 *            conversation event.
	 */
	public void addChatEvent(String conversationKey, ConversationEvent event) {
		synchronized (chatEvents) {
			List<ConversationEvent> events = chatEvents.get(conversationKey);
			if (events == null) {
				events = new ArrayList<ConversationEvent>();
				chatEvents.put(conversationKey, events);
			}
			events.add(event);
		}
	}
}
